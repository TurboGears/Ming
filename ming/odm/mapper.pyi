from typing import type_check_only, TypeVar, Generic, Optional, Union, Any, Dict

from bson import ObjectId
from ming.base import Cursor

M = TypeVar('M')

MongoFilter = dict
ChangeResult = dict
class _ClassQuery(Generic[M]):
    # proxies most of these from Session
    def get(self, _id: Union[ObjectId|Any] = None, **kwargs) -> Optional[M]: ...
    def find(self, filter: MongoFilter = None, *args, **kwargs) -> Cursor[M]: ...
    def find_by(self, filter: MongoFilter = None, *args, **kwargs) -> Cursor[M]: ...
    def remove(self, spec_or_id: Union[MongoFilter, ObjectId], **kwargs) -> ChangeResult: ...
    def count(self) -> int: ...
    def find_and_modify(self, **kwargs) -> M: ...
    def update(self, spec: MongoFilter, fields: dict, **kwargs) -> ChangeResult: ...
    """
    def group(self) -> int: ...
    def distinct(self) -> int: ...
    def aggregate(self) -> int: ...
    def map_reduce(self) -> int: ...
    def inline_map_reduce(self) -> int: ...
    """

class _InstQuery(object):
    # proxied from session:
    def update_if_not_modified(self, obj, fields, upsert=False) -> bool: ...

    def delete(self) -> ChangeResult: ...
    def update(self, fields, **kwargs) -> ChangeResult: ...

@type_check_only
class Query(_ClassQuery[M], _InstQuery): ...


def __getattr__(name) -> Any: ...  # marks file as incomplete